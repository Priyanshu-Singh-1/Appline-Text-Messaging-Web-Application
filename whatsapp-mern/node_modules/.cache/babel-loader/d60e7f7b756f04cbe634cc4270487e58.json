{"ast":null,"code":"/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport { exactProp } from '@material-ui/utils';\n/**\n * Utility component that locks focus inside the component.\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    var contain = function contain() {\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    var loopFocus = function loopFocus(event) {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      contain();\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;","map":{"version":3,"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","exactProp","Unstable_TrapFocus","props","children","_props$disableAutoFoc","disableAutoFocus","_props$disableEnforce","disableEnforceFocus","_props$disableRestore","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","rootRef","handleOwnRef","useCallback","instance","current","findDOMNode","handleRef","ref","prevOpenRef","useEffect","window","activeElement","doc","contains","hasAttribute","process","env","NODE_ENV","console","error","join","setAttribute","focus","contain","rootElement","hasFocus","loopFocus","event","keyCode","shiftKey","addEventListener","interval","setInterval","clearInterval","removeEventListener","createElement","Fragment","tabIndex","cloneElement","propTypes","node","bool","func","isRequired"],"sources":["C:/Users/DELL/Desktop/whatsapp-mern/node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js"],"sourcesContent":["/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport { exactProp } from '@material-ui/utils';\n/**\n * Utility component that locks focus inside the component.\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    var contain = function contain() {\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    var loopFocus = function loopFocus(event) {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      contain();\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;"],"mappings":"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"},"metadata":{},"sourceType":"module"}